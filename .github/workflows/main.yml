name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker images
      run: |
        docker build -t wadeed/fyp_1:v1 React2/myapp
        docker build -t wadeed/fyp_1:v2 Backend
        docker build -t wadeed/fyp_1:v3 Medifast

    - name: Push Docker images to Docker Hub
      run: |
        docker push wadeed/fyp_1:v1
        docker push wadeed/fyp_1:v2
        docker push wadeed/fyp_1:v3

    # Optional: Uncomment if tests are added
    # - name: Run frontend tests
    #   run: docker run --rm wadeed/fyp_1:v1 npm test -- --coverage

    # - name: Run backend tests
    #   run: docker run --rm wadeed/fyp_1:v2 pytest

    # - name: Run PHP backend tests
    #   run: docker run --rm wadeed/fyp_1:v3 vendor/bin/phpunit

  cd:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull Docker images from Docker Hub
      run: |
        docker pull wadeed/fyp_1:v1
        docker pull wadeed/fyp_1:v2
        docker pull wadeed/fyp_1:v3

    - name: Scan Docker images with Trivy
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image wadeed/fyp_1:v1
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image wadeed/fyp_1:v2
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image wadeed/fyp_1:v3

    - name: Start Minikube
      run: |
        minikube start --driver=docker

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Install Docker Compose (v2 manual install)
      run: |
        mkdir -p ~/.docker/cli-plugins/
        curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
        chmod +x ~/.docker/cli-plugins/docker-compose
        docker compose version

    - name: Deploy images to Kubernetes
      run: |
        kubectl create deployment frontend --image=wadeed/fyp_1:v1
        kubectl expose deployment frontend --type=NodePort --port=3000

        kubectl create deployment backend --image=wadeed/fyp_1:v2
        kubectl expose deployment backend --type=NodePort --port=5000

        kubectl create deployment backend2 --image=wadeed/fyp_1:v3
        kubectl expose deployment backend2 --type=NodePort --port=80

    - name: Deploy MySQL using Docker Compose
      run: |
        docker compose -f docker-compose.yml up -d mysql
